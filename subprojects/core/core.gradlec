/*
 * Copyright 2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.codehaus.groovy.runtime.InvokerHelper
import org.gradle.api.internal.DynamicObjectAware

configurations.create('reports')

Map<String,String> libraries = (Map<String, String>) project.findProperty('libraries')

dependencies {
    compile libraries.groovy

    publishCompile libraries.slf4j_api
    publishCompile project(":baseServices")
    publishCompile project(":baseServicesGroovy"), { ModuleDependency dep ->
        dep.exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    publishCompile project(":messaging")
    publishCompile project(":logging")
    publishCompile project(":resources")

    compile project(":modelCore")
    compile project(":modelGroovy")
    compile libraries.asm
    compile libraries.ant
    compile libraries.commons_collections
    compile libraries.commons_io
    compile libraries.commons_lang
    compile libraries.guava
    compile libraries.jcip
    compile libraries.inject

    compile project(":cli")
    compile project(":native")

    runtime project(":docs")

    testCompile libraries.jsoup

    testRuntime libraries.xerces
    testRuntime project(":diagnostics")

    testFixturesCompile project(":internalTesting")
    testFixturesCompile libraries.ivy

    testFixturesRuntime project(':dependencyManagement')
    testFixturesRuntime project(':pluginUse')

    integTestCompile project(":internalIntegTesting")

    integTestRuntime project(":plugins")
}

def useTestFixtures(Map<String,String> params = [:], Project p) {
    String projectPath = params.project ?: ":core"
    String sourceSet = params.sourceSet ?: "test"
    String compileConfiguration = sourceSet == "main" ? "compile" : "${sourceSet}Compile"
    String runtimeConfiguration = sourceSet == "main" ? "runtime" : "${sourceSet}Runtime"

    p.dependencies {
        add(compileConfiguration, project(path: projectPath, configuration: "testFixturesUsageCompile"))
        add(compileConfiguration, project(':internalTesting'))
        add(runtimeConfiguration, project(path: projectPath, configuration: "testFixturesUsageRuntime"))
    }
}

useTestFixtures(project, )
useTestFixtures(project, project: ":messaging")
useTestFixtures(project, project: ":modelCore")
useTestFixtures(project, project: ":logging")

tasks.configure('test', Test) {
    forkEvery = 200
}

([tasks.findByName('compileGroovy'), tasks.findByName('compileTestGroovy')] as List<GroovyCompile>)*.groovyOptions*.fork(memoryInitialSize: (Object)'128M', memoryMaximumSize: '1G')

def generatedResourcesDir = project.findProperty('generatedResourcesDir')

tasks.create('buildReceiptResource' , Copy) {
    dependsOn rootProject.tasks.findByName('createBuildReceipt')
    into "$generatedResourcesDir/org/gradle"
    from InvokerHelper.getProperty(rootProject.tasks.findByName('createBuildReceipt'), 'receiptFile')
}

def mainSourceSet = convention.findPlugin(JavaPluginConvention).sourceSets.findByName('main')

mainSourceSet.output.dir generatedResourcesDir, builtBy: (Object)tasks.findByName('buildReceiptResource')

task pluginsManifest(type: PluginsManifest)
mainSourceSet.output.dir generatedResourcesDir, builtBy: (Object)tasks.findByName('pluginsManifest')

class PluginsManifest extends DefaultTask {
    @OutputFile
    File getPropertiesFile() {
        return new File((File) project.findProperty('generatedResourcesDir'), "gradle-plugins.properties")
    }

    @Input
    Properties getPluginProperties() {
        def properties = new Properties()
        def pluginProjects = (List<Project>) project.findProperty('pluginProjects')
        properties.plugins = pluginProjects.collect { Project it ->
            it.convention.getPlugin(BasePluginConvention).archivesBaseName
        }.sort().join(',')
        return properties
    }

    @TaskAction
    def generate() {
        // Remove Properties timestamp for reproducible build
        def sw = new StringWriter()
        pluginProperties.store(sw, "")
        def content = sw.toString().split(/\n/).findAll { !it.startsWith("#") }.join("\n")
        propertiesFile.setText(content, "utf-8")
    }
}
