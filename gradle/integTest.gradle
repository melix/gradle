apply plugin: 'java'

sourceSets {
    integTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integTestCompile.extendsFrom testCompile
    integTestRuntime.extendsFrom testRuntime
}

dependencies {
    integTestCompile project(":internalIntegTesting")

    //so that implicit help tasks are available:
    integTestRuntime project(':diagnostics')
    //above can be removed when we implement the auto-apply plugins
}

ext.integTestTasks = tasks.withType(Test).matching { it.name != 'test' }

def removeDodgyCacheFiles(File dir) {
    if (dir.directory) {
        for (File cacheDir : dir.listFiles()) {
            if (!cacheDir.name.matches("\\d+\\.\\d+(\\.\\d+)?(-\\w+)*(-\\d{14}[+-]\\d{4})?")) {
                continue
            }
            for (String name : ["fileHashes", "outputFileStates", "fileSnapshots"]) {
                def stateDir = new File(cacheDir, name)
                if (stateDir.directory) {
                    println "Removing old cache directory : ${stateDir}"
                    delete(stateDir)
                }
            }
        }
    }
}

def removeOldVersionsFromDir(File dir, def shouldDelete, def dirPrefix = "", def dirSuffix = "") {
    if (dir.directory) {

        for (File cacheDir : dir.listFiles()) {
            if (!cacheDir.name.startsWith(dirPrefix) || !cacheDir.name.endsWith(dirSuffix)) {
                continue
            }
            def dirVersion = cacheDir.name.substring(dirPrefix.length(), cacheDir.name.length() - dirSuffix.length())
            if (!dirVersion.matches("\\d+\\.\\d+(\\.\\d+)?(-\\w+)*(-\\d{14}[+-]\\d{4})?")) {
                continue
            }

            def cacheVersion
            try {
                cacheVersion = GradleVersion.version(dirVersion)
            } catch (IllegalArgumentException e) {
                // Ignore
                continue
            }

            if (shouldDelete(cacheVersion)) {
                println "Removing old cache directory : ${cacheDir}"
                delete(cacheDir)
            }
        }
    }
}

project(":") {
    if (tasks.findByName('cleanUpCaches')) {
        return
    }

    task cleanUpCaches {
        dependsOn ':createBuildReceipt'
        doLast {
            def executingVersion = GradleVersion.version(gradle.gradleVersion)

            def versionProps = readBuildReceipt("${buildDir}/${buildReceiptFileName}")
            def testedVersion = GradleVersion.version(versionProps.versionNumber)

            // Expire .gradle cache where major version is older than executing version
            def expireTaskCache = { def candidateVersion ->
                return candidateVersion.baseVersion < executingVersion.baseVersion
            }

            // Expire intTestImage cache snapshots that are older than the tested version
            def expireIntegTestCache = { def candidateVersion ->
                return candidateVersion.snapshot && candidateVersion < testedVersion
            }

            // Remove state for old versions of Gradle that we're unlikely to ever require again
            removeOldVersionsFromDir(file("buildSrc/.gradle"), expireTaskCache)
            removeOldVersionsFromDir(file(".gradle"), expireTaskCache)
            removeOldVersionsFromDir(file("intTestHomeDir/worker-1/caches"), expireIntegTestCache)
            removeOldVersionsFromDir(file("intTestHomeDir/worker-1/daemon"), expireIntegTestCache)

            // Remove old distributions used by wrapper that we're unlikely to ever require again
            removeOldVersionsFromDir(file("intTestHomeDir/worker-1/wrapper/dists"), expireIntegTestCache, "gradle-", "-bin")
            delete(file("intTestHomeDir/worker-1/wrapper/dists/dist"))

            // Remove caches that weren't multi-process safe and may be corrupt
            removeDodgyCacheFiles(file("intTestHomeDir/worker-1/caches"))
        }
    }
}

def forEachDaemonProcess(Closure action) {
    def output = new ByteArrayOutputStream()
    exec {
        commandLine('pgrep', '-a','-f', 'GradleDaemon|IsolatedGradleWorkerMain')
        standardOutput = output
    }
    output.toString().readLines().each { String line ->
        def idx = line.indexOf(' ')
        def (pid, process) = [line[0..<idx], line[idx + 1..-1]]
        if (process.contains(rootProject.projectDir.absolutePath)
            && (process.contains('integ test') || process.contains('intTest'))) {
            action.call(pid)
        }

    }
}

def pkill(pid) {
    def killOutput = new ByteArrayOutputStream()
    def result = exec {
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            commandLine = ["taskkill.exe", "/F", "/T", "/PID", pid]
        } else {
            commandLine = ["kill", pid]
        }
        standardOutput = killOutput
        errorOutput = killOutput
        ignoreExitValue = true
    }
    if (result.exitValue != 0) {
        String out = killOutput.toString()
        if (!out.contains('No such process')) {
            throw new GradleException("""Failed to kill daemon process $pid.
Output: ${killOutput}
""")
        }
    }
}

project(":") {
    if (tasks.findByName('cleanUpDaemons')) {
        return
    }
    task killExistingDaemons {
        doLast {
            forEachDaemonProcess { pid ->
                logger.warn("A daemon wasn't shutdown properly in a previous Gradle run. Killing process with PID $pid")
                pkill(pid)
            }
        }
    }

    task cleanUpDaemons {
        doLast {
            forEachDaemonProcess { pid ->
                logger.warn("A daemon wasn't shutdown properly. Killing process with PID $pid")
                pkill(pid)
            }
        }
    }
}

integTestTasks.all { Test task ->
    dependsOn ':intTestImage', ':cleanUpCaches', ':killExistingDaemons'
    finalizedBy ':cleanUpDaemons'
    shouldRunAfter 'test'

    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
    testSrcDirs = []
    jvmArgs '-Xmx512m', '-XX:MaxPermSize=256m', '-XX:+HeapDumpOnOutOfMemoryError'

    reports.junitXml.destination = file("${project.testResultsDir}/$name")

    // use -PtestVersions=all or -PtestVersions=1.2,1.3â€¦
    systemProperties['org.gradle.integtest.versions'] = project.hasProperty('testVersions') ? project.testVersions : 'latest'

    systemProperties['org.gradle.integtest.cpp.toolChains'] = project.hasProperty("testAllPlatforms") ? 'all' : 'default'

    systemProperties['org.gradle.integtest.multiversion'] = project.hasProperty("multiVersion") ? 'all' : 'default'

    dependsOn project.task("configure${task.name.capitalize()}") << {
        configure(task) {
            reports.html.destination = file("${project.reporting.baseDir}/$name")
            systemProperties['integTest.gradleHomeDir'] = rootProject.intTestImage.destinationDir.absolutePath
            systemProperties['integTest.gradleUserHomeDir'] = rootProject.file('intTestHomeDir').absolutePath
            systemProperties['integTest.libsRepo'] = rootProject.file('build/repo')

            // If the projects int test need the distributions, they should add:
            // inputs.files rootProject.buildDists
            systemProperties['integTest.distsDir'] = rootProject.distsDir.absolutePath

            // The user home dir is not wiped out by clean
            // Move the daemon working space underneath the build dir so they don't pile up on CI
            systemProperties['org.gradle.integtest.daemon.registry'] = file("$rootProject.buildDir/daemon").absolutePath
        }
    }

    ext.daemonListener = null
    ext.suspiciousDaemons = [:].withDefault {[]}
    ext.daemonPids = [] as Set

    doFirst {
        daemonListener = [
            beforeTest : {test -> },
            afterTest  : { test, result ->},
            beforeSuite: { suite ->
                forEachDaemonProcess {
                    daemonPids << it
                }
            },
            afterSuite : { suite, result ->
                forEachDaemonProcess { pid ->
                    if (!daemonPids.contains(pid)) {
                        daemonPids << pid
                        suspiciousDaemons."$suite" << pid
                    }
                }
            }] as TestListener
        gradle.addListener(daemonListener)
    }

    doLast {
        gradle.removeListener(daemonListener)
        forEachDaemonProcess { pid ->
            suspiciousDaemons.each { suite, pids ->
                if (pids.contains(pid)) {
                    logger.warn("A test has left a daemon behind: $suite. Killing PID $pid")
                    pkill(pid)
                }
            }
        }
        // give some time for processes to disappear so that we don't try to kill'em twice
        sleep(1000)
    }
}

task integTest(type: Test) {
    def defaultExecuter = project.hasProperty("defaultIntegTestExecuter") ? project.defaultIntegTestExecuter : "embedded"
    systemProperties['org.gradle.integtest.executer'] = defaultExecuter
    if (project.hasProperty('org.gradle.integtest.debug')) {
        systemProperties['org.gradle.integtest.debug'] = 'true'
        testLogging.showStandardStreams = true
    }
}
check.dependsOn(integTest)

['embedded', 'forking', 'daemon', 'embeddedDaemon', 'parallel'].each { mode ->
    def taskName = "${mode}IntegTest"
    tasks.create(taskName, Test).configure {
        systemProperties['org.gradle.integtest.executer'] = mode
    }
}

task crossVersionIntegTest {
    description "Runs the cross version tests against all Gradle versions"
}

releasedVersions.allVersions.each { targetVersion ->
    tasks.create("gradle${targetVersion}IntegTest", Test).configure {
        crossVersionIntegTest.dependsOn path
        description "Runs the cross version tests against Gradle ${targetVersion}"
        systemProperties['org.gradle.integtest.versions'] = targetVersion
        systemProperties['org.gradle.integtest.executer'] = 'forking'
        include '**/*CrossVersion*'
    }
}

plugins.withType(org.gradle.plugins.ide.idea.IdeaPlugin) { // lazy as plugin not applied yet
    idea {
        module {
            testSourceDirs += sourceSets.integTest.groovy.srcDirs
            testSourceDirs += sourceSets.integTest.resources.srcDirs
            scopes.TEST.plus.add(configurations.integTestCompile)
            scopes.TEST.plus.add(configurations.integTestRuntime)
        }
    }
}

plugins.withType(org.gradle.plugins.ide.eclipse.EclipsePlugin) { // lazy as plugin not applied yet
    eclipse {
        classpath {
            plusConfigurations.add(configurations.integTestCompile)
            plusConfigurations.add(configurations.integTestRuntime)
        }
    }
}

String jdkVarName = 'JAVA_9'

model {
    tasks {
        create("java9Test", Test) {
            doFirst {
                jvmArgs = [] //Clears JVM args (maxPerm..) to work with JDK 9
            }
            executable = "${System.getenv(jdkVarName)}/bin/java"
            include '**/*CommandLineJavaCompilerIntegrationTest*'
            reports.junitXml.destination = file("${project.testResultsDir}/$name")
            reports.html.destination = file("${project.reporting.baseDir}/$name")
        }
    }
}

if(!gradle.hasProperty("java9Check")){
    gradle.taskGraph.whenReady { graph ->
        if (gradle.taskGraph.allTasks.any { it.name == "java9Test" }) {
            // Ideally, this would be a validate rule but it's not convenient to express this in the DSL yet
            if (!System.getenv(jdkVarName)) {
                throw new GradleException("A '$jdkVarName' environment variable, " +
                    "pointing to a java 9 JDK image, is required to run java9 tests!")
            }
        }
    }
    gradle.ext.java9Check = true
}
